Resources:
  CognitoUserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      MfaConfiguration: OFF
      UserPoolName: '${self:service}-user-pool-${opt:stage, self:provider.stage}'
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: True
          RequireNumbers: True
          RequireSymbols: False
          RequireUppercase: True
  CognitoUserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: '${self:service}-user-pool-client-${opt:stage, self:provider.stage}'
      GenerateSecret: False
      PreventUserExistenceErrors: ENABLED
      CallbackURLs:
        - 'http://localhost:4000'
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlowsUserPoolClient: True
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      UserPoolId:
        Ref: CognitoUserPool
  CognitoAdminUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admin
      Precedence: 1
      UserPoolId:
        Ref: CognitoUserPool
  ApiGatewayAuthorizer:
    DependsOn:
      - ApiGatewayRestApi
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: cognito-authorizer
      IdentitySource: method.request.header.Authorization
      RestApiId:
        Ref: ApiGatewayRestApi
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn
  GatewayResponseDefault4XX:
    Type: 'AWS::ApiGateway::GatewayResponse'
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_4XX
      RestApiId:
        Ref: 'ApiGatewayRestApi'
  ImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:provider.environment.SONG_CONTEST_RATER_IMAGES_BUCKET}
      AccessControl: Private
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: ['PUT']
            AllowedOrigins: ['*']
  ImagesBucketPermissions:
    Type: AWS::S3::BucketPolicy
    DependsOn: ImagesBucket
    Properties:
      Bucket: ${self:provider.environment.SONG_CONTEST_RATER_IMAGES_BUCKET}
      PolicyDocument:
        Statement:
          - Principal: '*'
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:GetObject
            Effect: Allow
            Sid: 'AddPerm'
            Resource: arn:aws:s3:::${self:provider.environment.SONG_CONTEST_RATER_IMAGES_BUCKET}/*

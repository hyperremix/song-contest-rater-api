createUser:
  handler: src/user/user-gateway.createUser
  events:
    - http:
        path: users
        method: post
        cors: true
listUsers:
  handler: src/user/user-gateway.listUsers
  events:
    - http:
        path: users
        method: get
        cors: true
        request:
          template:
            application/json: >
              {
                "ids" : "$input.params('ids')"
              }
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
getUser:
  handler: src/user/user-gateway.getUser
  events:
    - http:
        path: users/{id}
        method: get
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
updateUser:
  handler: src/user/user-gateway.updateUser
  events:
    - http:
        path: users/{id}
        method: put
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
initiateAvatarUpload:
  handler: src/user/user-gateway.initiateAvatarUpload
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: arn:aws:s3:::${self:provider.environment.SONG_CONTEST_RATER_IMAGES_BUCKET}/*
    - Effect: Allow
      Action:
        - dynamodb:GetItem
      Resource: '*'
  events:
    - http:
        path: users/{id}/avatar
        method: post
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
processUploadedAvatar:
  handler: src/user/user-gateway.processUploadedAvatar
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:HeadObject
      Resource: arn:aws:s3:::${self:provider.environment.SONG_CONTEST_RATER_IMAGES_BUCKET}/*
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource: '*'
  events:
    - s3:
        bucket: ${self:provider.environment.SONG_CONTEST_RATER_IMAGES_BUCKET}
        event: s3:ObjectCreated:*
        rules:
          - prefix: uploads/
        existing: true
deleteUser:
  handler: src/user/user-gateway.deleteUser
  events:
    - http:
        path: users/{id}
        method: delete
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
